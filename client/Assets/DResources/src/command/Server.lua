-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: SGFComm

local flatbuffers = require('flatbuffers')

local Server = {} -- the module
local Server_mt = {} -- the class metatable

function Server.New()
    local o = {}
    setmetatable(o, {__index = Server_mt})
    return o
end
function Server.GetRootAsServer(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = Server.New()
    o:Init(buf, n + offset)
    return o
end
function Server_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function Server_mt:Id()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function Server_mt:Name()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function Server_mt:Des()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function Server_mt:Status()
    local o = self.view:Offset(10)
    if o ~= 0 then
        return self.view:Get(flatbuffers.N.Int8, o + self.view.pos)
    end
    return 1
end
function Server.Start(builder) builder:StartObject(4) end
function Server.AddId(builder, id) builder:PrependUOffsetTRelativeSlot(0, id, 0) end
function Server.AddName(builder, name) builder:PrependUOffsetTRelativeSlot(1, name, 0) end
function Server.AddDes(builder, des) builder:PrependUOffsetTRelativeSlot(2, des, 0) end
function Server.AddStatus(builder, status) builder:PrependInt8Slot(3, status, 1) end
function Server.End(builder) return builder:EndObject() end

return Server -- return the module