-- automatically generated by the FlatBuffers compiler, do not modify

-- namespace: SGFComm

local flatbuffers = require('flatbuffers')

-- ////////////////////////////// login ////////////////////////
local CL_LS_Login = {} -- the module
local CL_LS_Login_mt = {} -- the class metatable

function CL_LS_Login.New()
    local o = {}
    setmetatable(o, {__index = CL_LS_Login_mt})
    return o
end
function CL_LS_Login.GetRootAsCL_LS_Login(buf, offset)
    local n = flatbuffers.N.UOffsetT:Unpack(buf, offset)
    local o = CL_LS_Login.New()
    o:Init(buf, n + offset)
    return o
end
function CL_LS_Login_mt:Init(buf, pos)
    self.view = flatbuffers.view.New(buf, pos)
end
function CL_LS_Login_mt:Accounts()
    local o = self.view:Offset(4)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function CL_LS_Login_mt:Password()
    local o = self.view:Offset(6)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function CL_LS_Login_mt:Nicename()
    local o = self.view:Offset(8)
    if o ~= 0 then
        return self.view:String(o + self.view.pos)
    end
end
function CL_LS_Login.Start(builder) builder:StartObject(3) end
function CL_LS_Login.AddAccounts(builder, accounts) builder:PrependUOffsetTRelativeSlot(0, accounts, 0) end
function CL_LS_Login.AddPassword(builder, password) builder:PrependUOffsetTRelativeSlot(1, password, 0) end
function CL_LS_Login.AddNicename(builder, nicename) builder:PrependUOffsetTRelativeSlot(2, nicename, 0) end
function CL_LS_Login.End(builder) return builder:EndObject() end

return CL_LS_Login -- return the module