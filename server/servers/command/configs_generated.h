// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIGS_SGFGAMECONFIGS_H_
#define FLATBUFFERS_GENERATED_CONFIGS_SGFGAMECONFIGS_H_

#include "flatbuffers/flatbuffers.h"

namespace SGFGameConfigs {

struct GameSvrConfig;
struct GameSvrConfigT;

struct LoginSvrConfig;
struct LoginSvrConfigT;

struct PublicSvrConfig;
struct PublicSvrConfigT;

struct GameSvrConfigT : public flatbuffers::NativeTable {
  typedef GameSvrConfig TableType;
  std::string host;
  std::string port;
  std::string db;
  GameSvrConfigT() {
  }
};

struct GameSvrConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GameSvrConfigT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HOST = 4,
    VT_PORT = 6,
    VT_DB = 8
  };
  const flatbuffers::String *host() const {
    return GetPointer<const flatbuffers::String *>(VT_HOST);
  }
  const flatbuffers::String *port() const {
    return GetPointer<const flatbuffers::String *>(VT_PORT);
  }
  const flatbuffers::String *db() const {
    return GetPointer<const flatbuffers::String *>(VT_DB);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HOST) &&
           verifier.VerifyString(host()) &&
           VerifyOffset(verifier, VT_PORT) &&
           verifier.VerifyString(port()) &&
           VerifyOffset(verifier, VT_DB) &&
           verifier.VerifyString(db()) &&
           verifier.EndTable();
  }
  GameSvrConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GameSvrConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<GameSvrConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GameSvrConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GameSvrConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_host(flatbuffers::Offset<flatbuffers::String> host) {
    fbb_.AddOffset(GameSvrConfig::VT_HOST, host);
  }
  void add_port(flatbuffers::Offset<flatbuffers::String> port) {
    fbb_.AddOffset(GameSvrConfig::VT_PORT, port);
  }
  void add_db(flatbuffers::Offset<flatbuffers::String> db) {
    fbb_.AddOffset(GameSvrConfig::VT_DB, db);
  }
  explicit GameSvrConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GameSvrConfigBuilder &operator=(const GameSvrConfigBuilder &);
  flatbuffers::Offset<GameSvrConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GameSvrConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<GameSvrConfig> CreateGameSvrConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> host = 0,
    flatbuffers::Offset<flatbuffers::String> port = 0,
    flatbuffers::Offset<flatbuffers::String> db = 0) {
  GameSvrConfigBuilder builder_(_fbb);
  builder_.add_db(db);
  builder_.add_port(port);
  builder_.add_host(host);
  return builder_.Finish();
}

inline flatbuffers::Offset<GameSvrConfig> CreateGameSvrConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *host = nullptr,
    const char *port = nullptr,
    const char *db = nullptr) {
  auto host__ = host ? _fbb.CreateString(host) : 0;
  auto port__ = port ? _fbb.CreateString(port) : 0;
  auto db__ = db ? _fbb.CreateString(db) : 0;
  return SGFGameConfigs::CreateGameSvrConfig(
      _fbb,
      host__,
      port__,
      db__);
}

flatbuffers::Offset<GameSvrConfig> CreateGameSvrConfig(flatbuffers::FlatBufferBuilder &_fbb, const GameSvrConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct LoginSvrConfigT : public flatbuffers::NativeTable {
  typedef LoginSvrConfig TableType;
  std::string host;
  std::string port;
  std::string db;
  LoginSvrConfigT() {
  }
};

struct LoginSvrConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginSvrConfigT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HOST = 4,
    VT_PORT = 6,
    VT_DB = 8
  };
  const flatbuffers::String *host() const {
    return GetPointer<const flatbuffers::String *>(VT_HOST);
  }
  const flatbuffers::String *port() const {
    return GetPointer<const flatbuffers::String *>(VT_PORT);
  }
  const flatbuffers::String *db() const {
    return GetPointer<const flatbuffers::String *>(VT_DB);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HOST) &&
           verifier.VerifyString(host()) &&
           VerifyOffset(verifier, VT_PORT) &&
           verifier.VerifyString(port()) &&
           VerifyOffset(verifier, VT_DB) &&
           verifier.VerifyString(db()) &&
           verifier.EndTable();
  }
  LoginSvrConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LoginSvrConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LoginSvrConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LoginSvrConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LoginSvrConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_host(flatbuffers::Offset<flatbuffers::String> host) {
    fbb_.AddOffset(LoginSvrConfig::VT_HOST, host);
  }
  void add_port(flatbuffers::Offset<flatbuffers::String> port) {
    fbb_.AddOffset(LoginSvrConfig::VT_PORT, port);
  }
  void add_db(flatbuffers::Offset<flatbuffers::String> db) {
    fbb_.AddOffset(LoginSvrConfig::VT_DB, db);
  }
  explicit LoginSvrConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginSvrConfigBuilder &operator=(const LoginSvrConfigBuilder &);
  flatbuffers::Offset<LoginSvrConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginSvrConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginSvrConfig> CreateLoginSvrConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> host = 0,
    flatbuffers::Offset<flatbuffers::String> port = 0,
    flatbuffers::Offset<flatbuffers::String> db = 0) {
  LoginSvrConfigBuilder builder_(_fbb);
  builder_.add_db(db);
  builder_.add_port(port);
  builder_.add_host(host);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginSvrConfig> CreateLoginSvrConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *host = nullptr,
    const char *port = nullptr,
    const char *db = nullptr) {
  auto host__ = host ? _fbb.CreateString(host) : 0;
  auto port__ = port ? _fbb.CreateString(port) : 0;
  auto db__ = db ? _fbb.CreateString(db) : 0;
  return SGFGameConfigs::CreateLoginSvrConfig(
      _fbb,
      host__,
      port__,
      db__);
}

flatbuffers::Offset<LoginSvrConfig> CreateLoginSvrConfig(flatbuffers::FlatBufferBuilder &_fbb, const LoginSvrConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PublicSvrConfigT : public flatbuffers::NativeTable {
  typedef PublicSvrConfig TableType;
  std::string host;
  std::string port;
  std::string db;
  PublicSvrConfigT() {
  }
};

struct PublicSvrConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PublicSvrConfigT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HOST = 4,
    VT_PORT = 6,
    VT_DB = 8
  };
  const flatbuffers::String *host() const {
    return GetPointer<const flatbuffers::String *>(VT_HOST);
  }
  const flatbuffers::String *port() const {
    return GetPointer<const flatbuffers::String *>(VT_PORT);
  }
  const flatbuffers::String *db() const {
    return GetPointer<const flatbuffers::String *>(VT_DB);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HOST) &&
           verifier.VerifyString(host()) &&
           VerifyOffset(verifier, VT_PORT) &&
           verifier.VerifyString(port()) &&
           VerifyOffset(verifier, VT_DB) &&
           verifier.VerifyString(db()) &&
           verifier.EndTable();
  }
  PublicSvrConfigT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PublicSvrConfigT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<PublicSvrConfig> Pack(flatbuffers::FlatBufferBuilder &_fbb, const PublicSvrConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PublicSvrConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_host(flatbuffers::Offset<flatbuffers::String> host) {
    fbb_.AddOffset(PublicSvrConfig::VT_HOST, host);
  }
  void add_port(flatbuffers::Offset<flatbuffers::String> port) {
    fbb_.AddOffset(PublicSvrConfig::VT_PORT, port);
  }
  void add_db(flatbuffers::Offset<flatbuffers::String> db) {
    fbb_.AddOffset(PublicSvrConfig::VT_DB, db);
  }
  explicit PublicSvrConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PublicSvrConfigBuilder &operator=(const PublicSvrConfigBuilder &);
  flatbuffers::Offset<PublicSvrConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PublicSvrConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<PublicSvrConfig> CreatePublicSvrConfig(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> host = 0,
    flatbuffers::Offset<flatbuffers::String> port = 0,
    flatbuffers::Offset<flatbuffers::String> db = 0) {
  PublicSvrConfigBuilder builder_(_fbb);
  builder_.add_db(db);
  builder_.add_port(port);
  builder_.add_host(host);
  return builder_.Finish();
}

inline flatbuffers::Offset<PublicSvrConfig> CreatePublicSvrConfigDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *host = nullptr,
    const char *port = nullptr,
    const char *db = nullptr) {
  auto host__ = host ? _fbb.CreateString(host) : 0;
  auto port__ = port ? _fbb.CreateString(port) : 0;
  auto db__ = db ? _fbb.CreateString(db) : 0;
  return SGFGameConfigs::CreatePublicSvrConfig(
      _fbb,
      host__,
      port__,
      db__);
}

flatbuffers::Offset<PublicSvrConfig> CreatePublicSvrConfig(flatbuffers::FlatBufferBuilder &_fbb, const PublicSvrConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GameSvrConfigT *GameSvrConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new GameSvrConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void GameSvrConfig::UnPackTo(GameSvrConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = host(); if (_e) _o->host = _e->str(); };
  { auto _e = port(); if (_e) _o->port = _e->str(); };
  { auto _e = db(); if (_e) _o->db = _e->str(); };
}

inline flatbuffers::Offset<GameSvrConfig> GameSvrConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GameSvrConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGameSvrConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<GameSvrConfig> CreateGameSvrConfig(flatbuffers::FlatBufferBuilder &_fbb, const GameSvrConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GameSvrConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _host = _o->host.empty() ? 0 : _fbb.CreateString(_o->host);
  auto _port = _o->port.empty() ? 0 : _fbb.CreateString(_o->port);
  auto _db = _o->db.empty() ? 0 : _fbb.CreateString(_o->db);
  return SGFGameConfigs::CreateGameSvrConfig(
      _fbb,
      _host,
      _port,
      _db);
}

inline LoginSvrConfigT *LoginSvrConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new LoginSvrConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void LoginSvrConfig::UnPackTo(LoginSvrConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = host(); if (_e) _o->host = _e->str(); };
  { auto _e = port(); if (_e) _o->port = _e->str(); };
  { auto _e = db(); if (_e) _o->db = _e->str(); };
}

inline flatbuffers::Offset<LoginSvrConfig> LoginSvrConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LoginSvrConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLoginSvrConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LoginSvrConfig> CreateLoginSvrConfig(flatbuffers::FlatBufferBuilder &_fbb, const LoginSvrConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LoginSvrConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _host = _o->host.empty() ? 0 : _fbb.CreateString(_o->host);
  auto _port = _o->port.empty() ? 0 : _fbb.CreateString(_o->port);
  auto _db = _o->db.empty() ? 0 : _fbb.CreateString(_o->db);
  return SGFGameConfigs::CreateLoginSvrConfig(
      _fbb,
      _host,
      _port,
      _db);
}

inline PublicSvrConfigT *PublicSvrConfig::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new PublicSvrConfigT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void PublicSvrConfig::UnPackTo(PublicSvrConfigT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = host(); if (_e) _o->host = _e->str(); };
  { auto _e = port(); if (_e) _o->port = _e->str(); };
  { auto _e = db(); if (_e) _o->db = _e->str(); };
}

inline flatbuffers::Offset<PublicSvrConfig> PublicSvrConfig::Pack(flatbuffers::FlatBufferBuilder &_fbb, const PublicSvrConfigT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePublicSvrConfig(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<PublicSvrConfig> CreatePublicSvrConfig(flatbuffers::FlatBufferBuilder &_fbb, const PublicSvrConfigT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const PublicSvrConfigT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _host = _o->host.empty() ? 0 : _fbb.CreateString(_o->host);
  auto _port = _o->port.empty() ? 0 : _fbb.CreateString(_o->port);
  auto _db = _o->db.empty() ? 0 : _fbb.CreateString(_o->db);
  return SGFGameConfigs::CreatePublicSvrConfig(
      _fbb,
      _host,
      _port,
      _db);
}

inline const SGFGameConfigs::GameSvrConfig *GetGameSvrConfig(const void *buf) {
  return flatbuffers::GetRoot<SGFGameConfigs::GameSvrConfig>(buf);
}

inline const SGFGameConfigs::GameSvrConfig *GetSizePrefixedGameSvrConfig(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SGFGameConfigs::GameSvrConfig>(buf);
}

inline bool VerifyGameSvrConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SGFGameConfigs::GameSvrConfig>(nullptr);
}

inline bool VerifySizePrefixedGameSvrConfigBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SGFGameConfigs::GameSvrConfig>(nullptr);
}

inline void FinishGameSvrConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SGFGameConfigs::GameSvrConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameSvrConfigBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SGFGameConfigs::GameSvrConfig> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<GameSvrConfigT> UnPackGameSvrConfig(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<GameSvrConfigT>(GetGameSvrConfig(buf)->UnPack(res));
}

}  // namespace SGFGameConfigs

#endif  // FLATBUFFERS_GENERATED_CONFIGS_SGFGAMECONFIGS_H_
