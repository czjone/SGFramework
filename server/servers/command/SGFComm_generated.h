// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SGFCOMM_SGFCOMM_H_
#define FLATBUFFERS_GENERATED_SGFCOMM_SGFCOMM_H_

#include "flatbuffers/flatbuffers.h"

namespace SGFComm {

struct CL_LS_Login;
struct CL_LS_LoginT;

struct CL_GS_Login;
struct CL_GS_LoginT;

struct Server;
struct ServerT;

struct LS_CL_ServerList;
struct LS_CL_ServerListT;

////////////////////////////// server list /////////////////
enum ServerStatus {
  ServerStatus_Normal = 1,
  ServerStatus_Close = 2,
  ServerStatus_Busy = 3,
  ServerStatus_Msaintenance = 4,
  ServerStatus_MIN = ServerStatus_Normal,
  ServerStatus_MAX = ServerStatus_Msaintenance
};

inline const ServerStatus (&EnumValuesServerStatus())[4] {
  static const ServerStatus values[] = {
    ServerStatus_Normal,
    ServerStatus_Close,
    ServerStatus_Busy,
    ServerStatus_Msaintenance
  };
  return values;
}

inline const char * const *EnumNamesServerStatus() {
  static const char * const names[] = {
    "Normal",
    "Close",
    "Busy",
    "Msaintenance",
    nullptr
  };
  return names;
}

inline const char *EnumNameServerStatus(ServerStatus e) {
  if (e < ServerStatus_Normal || e > ServerStatus_Msaintenance) return "";
  const size_t index = static_cast<int>(e) - static_cast<int>(ServerStatus_Normal);
  return EnumNamesServerStatus()[index];
}

struct CL_LS_LoginT : public flatbuffers::NativeTable {
  typedef CL_LS_Login TableType;
  std::string accounts;
  std::string password;
  std::string nicename;
  CL_LS_LoginT() {
  }
};

////////////////////////////// login ////////////////////////
struct CL_LS_Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CL_LS_LoginT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNTS = 4,
    VT_PASSWORD = 6,
    VT_NICENAME = 8
  };
  const flatbuffers::String *accounts() const {
    return GetPointer<const flatbuffers::String *>(VT_ACCOUNTS);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  const flatbuffers::String *nicename() const {
    return GetPointer<const flatbuffers::String *>(VT_NICENAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCOUNTS) &&
           verifier.VerifyString(accounts()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(password()) &&
           VerifyOffset(verifier, VT_NICENAME) &&
           verifier.VerifyString(nicename()) &&
           verifier.EndTable();
  }
  CL_LS_LoginT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CL_LS_LoginT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CL_LS_Login> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CL_LS_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CL_LS_LoginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_accounts(flatbuffers::Offset<flatbuffers::String> accounts) {
    fbb_.AddOffset(CL_LS_Login::VT_ACCOUNTS, accounts);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(CL_LS_Login::VT_PASSWORD, password);
  }
  void add_nicename(flatbuffers::Offset<flatbuffers::String> nicename) {
    fbb_.AddOffset(CL_LS_Login::VT_NICENAME, nicename);
  }
  explicit CL_LS_LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CL_LS_LoginBuilder &operator=(const CL_LS_LoginBuilder &);
  flatbuffers::Offset<CL_LS_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CL_LS_Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<CL_LS_Login> CreateCL_LS_Login(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> accounts = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0,
    flatbuffers::Offset<flatbuffers::String> nicename = 0) {
  CL_LS_LoginBuilder builder_(_fbb);
  builder_.add_nicename(nicename);
  builder_.add_password(password);
  builder_.add_accounts(accounts);
  return builder_.Finish();
}

inline flatbuffers::Offset<CL_LS_Login> CreateCL_LS_LoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *accounts = nullptr,
    const char *password = nullptr,
    const char *nicename = nullptr) {
  auto accounts__ = accounts ? _fbb.CreateString(accounts) : 0;
  auto password__ = password ? _fbb.CreateString(password) : 0;
  auto nicename__ = nicename ? _fbb.CreateString(nicename) : 0;
  return SGFComm::CreateCL_LS_Login(
      _fbb,
      accounts__,
      password__,
      nicename__);
}

flatbuffers::Offset<CL_LS_Login> CreateCL_LS_Login(flatbuffers::FlatBufferBuilder &_fbb, const CL_LS_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CL_GS_LoginT : public flatbuffers::NativeTable {
  typedef CL_GS_Login TableType;
  std::string token;
  CL_GS_LoginT() {
  }
};

struct CL_GS_Login FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CL_GS_LoginT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4
  };
  const flatbuffers::String *token() const {
    return GetPointer<const flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
  CL_GS_LoginT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CL_GS_LoginT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<CL_GS_Login> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CL_GS_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CL_GS_LoginBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(flatbuffers::Offset<flatbuffers::String> token) {
    fbb_.AddOffset(CL_GS_Login::VT_TOKEN, token);
  }
  explicit CL_GS_LoginBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CL_GS_LoginBuilder &operator=(const CL_GS_LoginBuilder &);
  flatbuffers::Offset<CL_GS_Login> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CL_GS_Login>(end);
    return o;
  }
};

inline flatbuffers::Offset<CL_GS_Login> CreateCL_GS_Login(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> token = 0) {
  CL_GS_LoginBuilder builder_(_fbb);
  builder_.add_token(token);
  return builder_.Finish();
}

inline flatbuffers::Offset<CL_GS_Login> CreateCL_GS_LoginDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return SGFComm::CreateCL_GS_Login(
      _fbb,
      token__);
}

flatbuffers::Offset<CL_GS_Login> CreateCL_GS_Login(flatbuffers::FlatBufferBuilder &_fbb, const CL_GS_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ServerT : public flatbuffers::NativeTable {
  typedef Server TableType;
  std::string id;
  std::string name;
  std::string des;
  ServerStatus status;
  ServerT()
      : status(ServerStatus_Normal) {
  }
};

struct Server FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServerT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DES = 8,
    VT_STATUS = 10
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *des() const {
    return GetPointer<const flatbuffers::String *>(VT_DES);
  }
  ServerStatus status() const {
    return static_cast<ServerStatus>(GetField<int8_t>(VT_STATUS, 1));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DES) &&
           verifier.VerifyString(des()) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
  ServerT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ServerT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Server> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServerT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ServerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Server::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Server::VT_NAME, name);
  }
  void add_des(flatbuffers::Offset<flatbuffers::String> des) {
    fbb_.AddOffset(Server::VT_DES, des);
  }
  void add_status(ServerStatus status) {
    fbb_.AddElement<int8_t>(Server::VT_STATUS, static_cast<int8_t>(status), 1);
  }
  explicit ServerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServerBuilder &operator=(const ServerBuilder &);
  flatbuffers::Offset<Server> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Server>(end);
    return o;
  }
};

inline flatbuffers::Offset<Server> CreateServer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> des = 0,
    ServerStatus status = ServerStatus_Normal) {
  ServerBuilder builder_(_fbb);
  builder_.add_des(des);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Server> CreateServerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *des = nullptr,
    ServerStatus status = ServerStatus_Normal) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto des__ = des ? _fbb.CreateString(des) : 0;
  return SGFComm::CreateServer(
      _fbb,
      id__,
      name__,
      des__,
      status);
}

flatbuffers::Offset<Server> CreateServer(flatbuffers::FlatBufferBuilder &_fbb, const ServerT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct LS_CL_ServerListT : public flatbuffers::NativeTable {
  typedef LS_CL_ServerList TableType;
  std::vector<std::unique_ptr<ServerT>> Servers;
  LS_CL_ServerListT() {
  }
};

struct LS_CL_ServerList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LS_CL_ServerListT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Server>> *Servers() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Server>> *>(VT_SERVERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SERVERS) &&
           verifier.VerifyVector(Servers()) &&
           verifier.VerifyVectorOfTables(Servers()) &&
           verifier.EndTable();
  }
  LS_CL_ServerListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LS_CL_ServerListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<LS_CL_ServerList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LS_CL_ServerListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LS_CL_ServerListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Servers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Server>>> Servers) {
    fbb_.AddOffset(LS_CL_ServerList::VT_SERVERS, Servers);
  }
  explicit LS_CL_ServerListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LS_CL_ServerListBuilder &operator=(const LS_CL_ServerListBuilder &);
  flatbuffers::Offset<LS_CL_ServerList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LS_CL_ServerList>(end);
    return o;
  }
};

inline flatbuffers::Offset<LS_CL_ServerList> CreateLS_CL_ServerList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Server>>> Servers = 0) {
  LS_CL_ServerListBuilder builder_(_fbb);
  builder_.add_Servers(Servers);
  return builder_.Finish();
}

inline flatbuffers::Offset<LS_CL_ServerList> CreateLS_CL_ServerListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Server>> *Servers = nullptr) {
  auto Servers__ = Servers ? _fbb.CreateVector<flatbuffers::Offset<Server>>(*Servers) : 0;
  return SGFComm::CreateLS_CL_ServerList(
      _fbb,
      Servers__);
}

flatbuffers::Offset<LS_CL_ServerList> CreateLS_CL_ServerList(flatbuffers::FlatBufferBuilder &_fbb, const LS_CL_ServerListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CL_LS_LoginT *CL_LS_Login::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CL_LS_LoginT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void CL_LS_Login::UnPackTo(CL_LS_LoginT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = accounts(); if (_e) _o->accounts = _e->str(); };
  { auto _e = password(); if (_e) _o->password = _e->str(); };
  { auto _e = nicename(); if (_e) _o->nicename = _e->str(); };
}

inline flatbuffers::Offset<CL_LS_Login> CL_LS_Login::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CL_LS_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCL_LS_Login(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CL_LS_Login> CreateCL_LS_Login(flatbuffers::FlatBufferBuilder &_fbb, const CL_LS_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CL_LS_LoginT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _accounts = _o->accounts.empty() ? 0 : _fbb.CreateString(_o->accounts);
  auto _password = _o->password.empty() ? 0 : _fbb.CreateString(_o->password);
  auto _nicename = _o->nicename.empty() ? 0 : _fbb.CreateString(_o->nicename);
  return SGFComm::CreateCL_LS_Login(
      _fbb,
      _accounts,
      _password,
      _nicename);
}

inline CL_GS_LoginT *CL_GS_Login::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CL_GS_LoginT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void CL_GS_Login::UnPackTo(CL_GS_LoginT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = token(); if (_e) _o->token = _e->str(); };
}

inline flatbuffers::Offset<CL_GS_Login> CL_GS_Login::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CL_GS_LoginT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCL_GS_Login(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<CL_GS_Login> CreateCL_GS_Login(flatbuffers::FlatBufferBuilder &_fbb, const CL_GS_LoginT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CL_GS_LoginT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _token = _o->token.empty() ? 0 : _fbb.CreateString(_o->token);
  return SGFComm::CreateCL_GS_Login(
      _fbb,
      _token);
}

inline ServerT *Server::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ServerT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Server::UnPackTo(ServerT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); if (_e) _o->id = _e->str(); };
  { auto _e = name(); if (_e) _o->name = _e->str(); };
  { auto _e = des(); if (_e) _o->des = _e->str(); };
  { auto _e = status(); _o->status = _e; };
}

inline flatbuffers::Offset<Server> Server::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServerT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateServer(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Server> CreateServer(flatbuffers::FlatBufferBuilder &_fbb, const ServerT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ServerT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _des = _o->des.empty() ? 0 : _fbb.CreateString(_o->des);
  auto _status = _o->status;
  return SGFComm::CreateServer(
      _fbb,
      _id,
      _name,
      _des,
      _status);
}

inline LS_CL_ServerListT *LS_CL_ServerList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new LS_CL_ServerListT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void LS_CL_ServerList::UnPackTo(LS_CL_ServerListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Servers(); if (_e) { _o->Servers.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->Servers[_i] = std::unique_ptr<ServerT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<LS_CL_ServerList> LS_CL_ServerList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LS_CL_ServerListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLS_CL_ServerList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<LS_CL_ServerList> CreateLS_CL_ServerList(flatbuffers::FlatBufferBuilder &_fbb, const LS_CL_ServerListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const LS_CL_ServerListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Servers = _o->Servers.size() ? _fbb.CreateVector<flatbuffers::Offset<Server>> (_o->Servers.size(), [](size_t i, _VectorArgs *__va) { return CreateServer(*__va->__fbb, __va->__o->Servers[i].get(), __va->__rehasher); }, &_va ) : 0;
  return SGFComm::CreateLS_CL_ServerList(
      _fbb,
      _Servers);
}

inline const SGFComm::CL_LS_Login *GetCL_LS_Login(const void *buf) {
  return flatbuffers::GetRoot<SGFComm::CL_LS_Login>(buf);
}

inline const SGFComm::CL_LS_Login *GetSizePrefixedCL_LS_Login(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SGFComm::CL_LS_Login>(buf);
}

inline bool VerifyCL_LS_LoginBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SGFComm::CL_LS_Login>(nullptr);
}

inline bool VerifySizePrefixedCL_LS_LoginBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SGFComm::CL_LS_Login>(nullptr);
}

inline void FinishCL_LS_LoginBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SGFComm::CL_LS_Login> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCL_LS_LoginBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SGFComm::CL_LS_Login> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<CL_LS_LoginT> UnPackCL_LS_Login(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<CL_LS_LoginT>(GetCL_LS_Login(buf)->UnPack(res));
}

}  // namespace SGFComm

#endif  // FLATBUFFERS_GENERATED_SGFCOMM_SGFCOMM_H_
