// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SGFGameConfigs
{

using global::System;
using global::FlatBuffers;

public struct LoginSvrConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LoginSvrConfig GetRootAsLoginSvrConfig(ByteBuffer _bb) { return GetRootAsLoginSvrConfig(_bb, new LoginSvrConfig()); }
  public static LoginSvrConfig GetRootAsLoginSvrConfig(ByteBuffer _bb, LoginSvrConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LoginSvrConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Host { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHostBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetHostBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetHostArray() { return __p.__vector_as_array<byte>(4); }
  public string Port { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPortBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetPortBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPortArray() { return __p.__vector_as_array<byte>(6); }
  public string Db { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDbBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetDbBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDbArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<LoginSvrConfig> CreateLoginSvrConfig(FlatBufferBuilder builder,
      StringOffset hostOffset = default(StringOffset),
      StringOffset portOffset = default(StringOffset),
      StringOffset dbOffset = default(StringOffset)) {
    builder.StartObject(3);
    LoginSvrConfig.AddDb(builder, dbOffset);
    LoginSvrConfig.AddPort(builder, portOffset);
    LoginSvrConfig.AddHost(builder, hostOffset);
    return LoginSvrConfig.EndLoginSvrConfig(builder);
  }

  public static void StartLoginSvrConfig(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddHost(FlatBufferBuilder builder, StringOffset hostOffset) { builder.AddOffset(0, hostOffset.Value, 0); }
  public static void AddPort(FlatBufferBuilder builder, StringOffset portOffset) { builder.AddOffset(1, portOffset.Value, 0); }
  public static void AddDb(FlatBufferBuilder builder, StringOffset dbOffset) { builder.AddOffset(2, dbOffset.Value, 0); }
  public static Offset<LoginSvrConfig> EndLoginSvrConfig(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LoginSvrConfig>(o);
  }
};


}
