// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SGFComm
{

using global::System;
using global::FlatBuffers;

public struct Server : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Server GetRootAsServer(ByteBuffer _bb) { return GetRootAsServer(_bb, new Server()); }
  public static Server GetRootAsServer(ByteBuffer _bb, Server obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Server __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Des { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetDesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDesArray() { return __p.__vector_as_array<byte>(8); }
  public ServerStatus Status { get { int o = __p.__offset(10); return o != 0 ? (ServerStatus)__p.bb.GetSbyte(o + __p.bb_pos) : ServerStatus.Normal; } }

  public static Offset<Server> CreateServer(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      StringOffset desOffset = default(StringOffset),
      ServerStatus status = ServerStatus.Normal) {
    builder.StartObject(4);
    Server.AddDes(builder, desOffset);
    Server.AddName(builder, nameOffset);
    Server.AddId(builder, idOffset);
    Server.AddStatus(builder, status);
    return Server.EndServer(builder);
  }

  public static void StartServer(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDes(FlatBufferBuilder builder, StringOffset desOffset) { builder.AddOffset(2, desOffset.Value, 0); }
  public static void AddStatus(FlatBufferBuilder builder, ServerStatus status) { builder.AddSbyte(3, (sbyte)status, 1); }
  public static Offset<Server> EndServer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Server>(o);
  }
};


}
